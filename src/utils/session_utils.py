import logging
import time
from typing import Dict, Optional
from config.config import get_current_timestamp

logger = logging.getLogger(__name__)

class SessionState:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤—Å—Ç—Ä–µ—á–∏"""
    def __init__(self, root_folder: str, folder_path: str, folder_name: str, user_id: int):
        self.root_folder = root_folder
        self.folder_path = folder_path
        self.folder_name = folder_name
        self.timestamp = get_current_timestamp()
        self.txt_file_path = f"{folder_path}/{self.timestamp}_visit_{folder_name}_{user_id}.txt"
        self.file_prefix = f"{self.timestamp}_Files_{folder_name}_{user_id}"
        self.user_id = user_id
        self.messages = []  # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
        self.start_time = time.time()
    
    def get_txt_filename(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        return f"{self.timestamp}_visit_{self.folder_name}_{self.user_id}.txt"
    
    def get_media_prefix(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        return f"{self.timestamp}_Files_{self.folder_name}_{self.user_id}"
    
    def add_message(self, message: str, author: str = "") -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        author_prefix = f"[{author}] " if author else ""
        formatted_message = f"[{timestamp}] {author_prefix}{message}"
        self.messages.append(formatted_message)
        logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é: {formatted_message[:50]}...")
        return formatted_message
    
    def get_session_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏"""
        duration = time.time() - self.start_time
        hours, remainder = divmod(int(duration), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total_messages = len(self.messages)
        
        summary = [
            f"üìÅ –ü–∞–ø–∫–∞: {self.folder_path}",
            f"üìÑ –§–∞–π–ª: {self.get_txt_filename()}",
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours}—á {minutes}–º {seconds}—Å",
            f"‚úçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {total_messages}"
        ]
        
        return "\n".join(summary)

class StateManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    def __init__(self):
        # –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        self.sessions: Dict[int, SessionState] = {}
        # –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
        self.states: Dict[int, str] = {}
        # –ö–ª—é—á: user_id, –ó–Ω–∞—á–µ–Ω–∏–µ: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.data: Dict[int, Dict] = {}
    
    def set_state(self, user_id: int, state: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.states[user_id] = state
        logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_state(self, user_id: int) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.states.get(user_id)
    
    def reset_state(self, user_id: int) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.states:
            del self.states[user_id]
    
    def set_session(self, user_id: int, session: SessionState) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.clear_session(user_id)
        # –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é
        self.sessions[user_id] = session
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {session.folder_path}")
    
    def get_session(self, user_id: int) -> Optional[SessionState]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.sessions.get(user_id)
    
    def clear_session(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.sessions:
            logger.info(f"–°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.sessions[user_id].folder_path}")
            del self.sessions[user_id]
    
    def has_active_session(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"""
        return user_id in self.sessions

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_manager = StateManager() 