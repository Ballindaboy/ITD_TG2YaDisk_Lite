import logging
import asyncio
import json
from functools import partial
from typing import List, Dict, Any, Tuple, Optional, Callable
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from config.config import FOLDERS_FILE

logger = logging.getLogger(__name__)

class FolderNavigator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –ø–∞–ø–∫–∞–º –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –≤ Telegram –±–æ—Ç–µ."""
    def __init__(
        self, 
        yadisk_helper,
        folder_selected_callback: Optional[Callable] = None,
        title: str = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É:",
        add_current_folder_button: bool = True,
        create_folder_button: bool = True,
        extra_buttons: List[str] = None
    ):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ –ø–æ –ø–∞–ø–∫–∞–º."""
        self.yadisk_helper = yadisk_helper
        self.title = title
        self.add_current_folder_button = add_current_folder_button
        self.create_folder_button = create_folder_button
        self.extra_buttons = extra_buttons or []
        self.folder_selected_callback = folder_selected_callback
        self.allowed_folders = self._load_allowed_folders()
        # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫
        self.folder_cache = {}
    
    def _load_allowed_folders(self) -> List[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞ allowed_folders.json"""
        try:
            with open(FOLDERS_FILE, 'r') as f:
                folders = json.load(f)
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø—É—Ç–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å / –∏ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ /
                return [self.normalize_path(folder) for folder in folders]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫: {e}", exc_info=True)
            return []
    
    @staticmethod
    def normalize_path(path: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞"""
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω API –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
        path = path.replace("disk:", "")
        
        # –ò –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç–∏ –∫–∞–∫ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∏ –∫–æ–Ω–µ—á–Ω—ã–º–∏ —Å–ª–µ—à–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
        # –î–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –º—ã –ø—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É —Å –Ω–∞—á–∞–ª—å–Ω—ã–º '/'
        # –∏ –±–µ–∑ –∫–æ–Ω–µ—á–Ω–æ–≥–æ '/' (–∫—Ä–æ–º–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏)
        if not path.startswith("/"):
            path = "/" + path
            
        if path != "/" and path.endswith("/"):
            path = path.rstrip("/")
            
        return path
    
    def get_folder_name(self, path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –ø–∞–ø–∫–∏ –∏–∑ –ø—É—Ç–∏"""
        if path == "/":
            return "–ö–æ—Ä–µ–Ω—å"
        
        path = self.normalize_path(path)
        parts = path.split("/")
        return parts[-1] if parts and parts[-1] else ""
    
    def get_parent_path(self, path: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å"""
        path = self.normalize_path(path)
        
        if path == "/":
            return "/"
            
        parts = path.split("/")
        if len(parts) <= 2:  # ['', '–∏–º—è_–ø–∞–ø–∫–∏']
            return "/"
            
        return "/".join(parts[:-1])
    
    def join_paths(self, parent_path: str, folder_name: str) -> str:
        """–°–æ–µ–¥–∏–Ω—è–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å –∏ –∏–º—è –ø–∞–ø–∫–∏ –≤ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å"""
        parent_path = self.normalize_path(parent_path)
        
        if parent_path == "/":
            return f"/{folder_name}"
        return f"{parent_path}/{folder_name}"
    
    async def get_folders(self, path: str, retry_count: int = 2, retry_delay: float = 1.0) -> List[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞"""
        normalized_path = self.normalize_path(path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Ç—å –≤ –∫—ç—à–µ
        if normalized_path in self.folder_cache:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –∏–∑ –∫—ç—à–∞ –¥–ª—è –ø—É—Ç–∏: {normalized_path}")
            return self.folder_cache[normalized_path]
        
        for attempt in range(retry_count + 1):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é list_dirs
                folders = await self.yadisk_helper.list_dirs_async(normalized_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                self.folder_cache[normalized_path] = folders
                
                return folders
            except Exception as e:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}/{retry_count+1} –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–æ–∫ –¥–ª—è {normalized_path} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
                if attempt < retry_count:
                    await asyncio.sleep(retry_delay)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è {normalized_path} –ø–æ—Å–ª–µ {retry_count+1} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}", exc_info=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
        return []
    
    async def cache_allowed_folders(self) -> None:
        """–ö—ç—à–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        if not self.allowed_folders:
            logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        logger.info("–ù–∞—á–∞–ª–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫...")
        for allowed_folder in self.allowed_folders:
            try:
                logger.info(f"–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {allowed_folder}")
                await self.get_folders(allowed_folder)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {allowed_folder}: {str(e)}", exc_info=True)
        
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    async def clear_cache(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –ø–∞–ø–æ–∫"""
        self.folder_cache.clear()
        logger.info("–ö—ç—à –ø–∞–ø–æ–∫ –æ—á–∏—â–µ–Ω")
    
    def build_keyboard(self, folders: List[Any], include_current_folder: bool = True) -> List[List[str]]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫"""
        keyboard = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_folders = 30
        display_folders = folders[:max_folders]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
        row = []
        for i, folder in enumerate(display_folders, 1):
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
            folder_name = folder.name if hasattr(folder, 'name') else folder.get('name', str(i))
            button_text = f"üìÅ {folder_name}"
            
            row.append(button_text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –ø–∞–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
            if len(row) == 2 or i == len(display_folders):
                keyboard.append(row)
                row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        special_buttons = []
        
        if include_current_folder and self.add_current_folder_button:
            special_buttons.append("‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç—É –ø–∞–ø–∫—É")
        
        if self.create_folder_button:
            special_buttons.append("‚ûï –ù–æ–≤–∞—è –ø–∞–ø–∫–∞")
        
        if special_buttons:
            keyboard.append(special_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        for button in self.extra_buttons:
            keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard.append(["‚ùå –û—Ç–º–µ–Ω–∞"])
        
        return keyboard
    
    def is_path_allowed(self, path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ö–æ–¥–∏—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫"""
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ª—é–±–æ–π –ø—É—Ç—å
        if not self.allowed_folders:
            return True
            
        normalized_path = self.normalize_path(path)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—É—Ç–∏
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏: {path} -> –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω –≤: {normalized_path}")
        logger.debug(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏: {self.allowed_folders}")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –æ–¥–Ω–∏–º –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        if normalized_path in self.allowed_folders:
            logger.debug(f"–ü—É—Ç—å {normalized_path} –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫")
            return True
            
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        for allowed_folder in self.allowed_folders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –∏ –ø–æ—Å–ª–µ –Ω–µ—ë –∏–¥–µ—Ç —Å–ª–µ—à –∏–ª–∏ –Ω–∏—á–µ–≥–æ
            if normalized_path.startswith(allowed_folder + "/") or normalized_path == allowed_folder:
                logger.debug(f"–ü—É—Ç—å {normalized_path} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ {allowed_folder}")
                return True
        
        logger.debug(f"–ü—É—Ç—å {normalized_path} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω")        
        return False
    
    async def show_folders(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE, 
        path: str = "/"
    ) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
        normalized_path = self.normalize_path(path)
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –∫–æ—Ä–Ω–µ–≤–æ–π, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        if normalized_path == "/" and self.allowed_folders:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –ø–∞–ø–∫–∞–º–∏
            message = f"{self.title}"
            allowed_folders_display = []
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for folder in self.allowed_folders:
                folder_name = self.get_folder_name(folder)
                allowed_folders_display.append({"name": folder_name, "path": folder})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –ø—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["folders"] = allowed_folders_display
            context.user_data["current_path"] = normalized_path
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–ø–∫–∞–º–∏
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(
                    self.build_keyboard(allowed_folders_display),
                    resize_keyboard=True
                )
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å
        if not self.is_path_allowed(normalized_path) and normalized_path != "/":
            await update.message.reply_text(
                "‚õî –ü–∞–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏
            await self.show_folders(update, context)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏
            folders = await self.get_folders(normalized_path)
            
            if not folders:
                await update.message.reply_text(
                    "üìÇ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞",
                    reply_markup=ReplyKeyboardRemove()
                )
                if normalized_path != "/":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏
                    await self.show_folders(update, context)
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if path == "/":
                message = self.title
            else:
                folder_name = self.get_folder_name(normalized_path)
                message = f"üìÇ {folder_name}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ –ø—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data["folders"] = folders
            context.user_data["current_path"] = normalized_path
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–ø–∫–∞–º–∏
            await update.message.reply_text(
                message,
                reply_markup=ReplyKeyboardMarkup(
                    self.build_keyboard(folders),
                    resize_keyboard=True
                )
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–ø–æ–∫ –¥–ª—è {normalized_path}: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "üö´ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                reply_markup=ReplyKeyboardRemove()
            )
    
    def reload_allowed_folders(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            self.allowed_folders = self._load_allowed_folders()
            logger.info(f"–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.allowed_folders)} –ø–∞–ø–æ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫: {e}", exc_info=True) 